<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		
		<DataRow>
			<Column name="ScriptID" value="22"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E8AB4E0D-2D8D-4b15-A1B1-169D45EA6D73}"/>
			<Column name="ScriptAuthor" value="{9FF6B584-B8DE-4f52-B70C-DC16BC41A7EB}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;NaturalLanguageGeneration&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	' Get the type of element selected in the Project Browser&#xA;	dim treeSelectedType&#xA;	treeSelectedType = Repository.GetTreeSelectedItemType()  &#xA;	Dim fso, objOutFile&#xA;	Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;) &#xA;	Set objOutFile = fso.CreateTextFile(&quot;C:\Users\alvar\NaturalLanguageGenerator\file.json&quot;, True) &#xA;	&#xA;	' Handling Code: Uncomment any types you wish this script to support&#xA;	' NOTE: You can toggle comments on multiple lines that are currently&#xA;	' selected with [CTRL]+[SHIFT]+[C].&#xA;	select case treeSelectedType&#xA;	&#xA;		case otElement&#xA;'			' Code for when an element is selected&#xA;'			dim theElement as EA.Element&#xA;'			set theElement = Repository.GetTreeSelectedObject()&#xA;'					&#xA;		case otPackage&#xA;'			&#xA;			' Code for when a package is selected&#xA;			dim thePackage as EA.Package&#xA;			set thePackage = Repository.GetTreeSelectedObject()   &#xA;			dim jsonString &#xA;			&#xA;			objOutFile.WriteLine &quot;{&quot;&quot;RootPackage&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; format(thePackage.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;			&quot;, &quot;&quot;Packages&quot;&quot; : [&quot; &#xA;			call generateJsonFromAPackage(thePackage,objOutFile)  &#xA;			objOutFile.WriteLine &quot;]&quot;&#xA;			objOutFile.WriteLine &quot;}&quot; &#xA;			&#xA;			&#xA;				&#xA;		case otDiagram&#xA;			dim theDiagram as EA.Diagram&#xA;			set theDiagram = Repository.GetTreeSelectedObject()  &#xA;			call generateJsonFromADiagram(theDiagram, objOutFile)  &#xA;			&#xA;			&#xA;'			&#xA;		&#xA;		case else&#xA;			' Error message&#xA;			Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;			&#xA;	end select&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript &#xA;&#xA;Function generateJsonFromADiagram(theDiagram, objOutFile)&#xA;	&#xA;			'Msgbox &quot;Diagram &quot; &amp; theDiagram.Name&#xA;			'Elements&#xA;			dim theElements as EA.Collection &#xA;			set theElements = theDiagram.DiagramObjects&#xA;			dim anElement as EA.DiagramObject &#xA;			dim TheElement as EA.Element  &#xA;			dim numOfElements &#xA;			numOfElements = theElements.Count()&#xA;			'Msgbox CStr(numOfElements)&#xA;			'Attributes&#xA;			dim Attribute as EA.Attribute &#xA;			dim Attributes as EA.Collection &#xA;			dim anAttribute as EA.DiagramObject&#xA;			'Connectors &#xA;			dim Connector as EA.Connector &#xA;			dim Connectors as EA.Collection &#xA;			dim aConnector as EA.Connector&#xA;			'dim Connetor as EA.Connector &#xA;			'Operations  &#xA;			dim Method as EA.Method &#xA;			dim Methods as EA.Collection &#xA;			dim anMethod as EA.DiagramObject&#xA;			'Counters  &#xA;			dim countElements &#xA;			dim countConnectors &#xA;			dim countAttributes &#xA;			dim countMethods &#xA;			dim smallestClassYCoord &#xA;			dim addClosingBracket&#xA;			countElements = 0&#xA;			countConnectors = 0 &#xA;			countAttributes = 0 &#xA;			countMethods = 0 &#xA;			smallestClassYCoord = 0 &#xA;			&#xA;			&#xA;			&#xA;			'objOutFile.WriteLine CStr(Repository.SQLQuery(&quot;SELECT t_connector.Btm_Mid_Label FROM t_connector&quot;)) &#xA;			'set Connector = Repository.GetConnectorByGuid(&quot;{BAC79F25-507A-4428-8B77-C2059D017622}&quot;)  &#xA;			&#xA;			&#xA;			'Msgbox Connector.ConnectorID &#xA;			'Msgbox TheElement.ElementID&#xA;			&#xA;			for each anElement in theElements &#xA;				set TheElement = Repository.GetElementByID(anElement.ElementID)  &#xA;				&#xA;				'Msgbox TheElement.Name + &quot; &quot; + TheElement.ElementGUID&#xA;				if TheElement.Type = &quot;Note&quot; or TheElement.Type = &quot;Constraint&quot; then&#xA;					if CStr(TheElement.MiscData(3)) = &quot;&quot; and Not TheElement.Connectors.Count = 0  then &#xA;						numOfElements = numOfElements - 1 &#xA;					end if &#xA;				end if &#xA;			next&#xA;				&#xA;			objOutFile.WriteLine &quot;{&quot;&quot;diagram&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; format(theDiagram.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;			&quot;, &quot;&quot;elements&quot;&quot; : [&quot;&#xA;			for each anElement in theElements &#xA;			&#xA;				addClosingBracket = True&#xA;				set TheElement = Repository.GetElementByID(anElement.ElementID)  &#xA;				if (TheElement.Type = &quot;Class&quot; or TheElement.Type = &quot;Interface&quot;) and anElement.bottom &lt; smallestClassYCoord then &#xA;					'Msgbox TheElement.Type&#xA;					smallestClassYCoord = anElement.bottom &#xA;				end if&#xA;				countElements = countElements + 1 &#xA;				if TheElement.Type = &quot;Note&quot; and TheElement.Connectors.Count = 0 then &#xA;					&#xA;					if CStr(TheElement.MiscData(3)) = &quot;&quot; then &#xA;						objOutFile.WriteLine &quot;{&quot;&quot;type&quot;&quot;: &quot; &amp; &quot;&quot;&quot;diagramNote&quot;&quot;&quot; &amp;_&#xA;						&quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(TheElement.Notes) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;						&quot;, &quot;&quot;y_coord&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; anElement.bottom &amp; &quot;&quot;&quot;&quot;&#xA;					else &#xA;						&#xA;						objOutFile.WriteLine &quot;{&quot;&quot;type&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.Type &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;						&quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(TheElement.Notes) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;						&quot;, &quot;&quot;connectedTo&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.MiscData(3) &amp; &quot;&quot;&quot;&quot; &#xA;					end if&#xA;				elseif TheElement.Type = &quot;Constraint&quot; and TheElement.Connectors.Count = 0 then  &#xA;					&#xA;					objOutFile.WriteLine &quot;{&quot;&quot;type&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.Type &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;					&quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(TheElement.Notes) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;					&quot;, &quot;&quot;connectedTo&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.MiscData(3) &amp; &quot;&quot;&quot;&quot;                                                               &#xA;				else &#xA;					if (TheElement.Type = &quot;Note&quot; or TheElement.Type = &quot;Constraint&quot;) then&#xA;						countElements = countElements -1&#xA;						addClosingBracket = False&#xA;							&#xA;					else &#xA;					&#xA;						objOutFile.WriteLine &quot;{&quot;&quot;elementId&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.ElementID &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;						&quot;, &quot;&quot;type&quot;&quot; : &quot; &amp; &quot;&quot;&quot;&quot; &amp; TheElement.Type &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;						&quot;, &quot;&quot;name&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(TheElement.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;						&quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(TheElement.Notes) &amp; &quot;&quot;&quot;&quot; &amp; &quot;, &quot;&#xA;						&#xA;						set Connectors = TheElement.Connectors &#xA;						set Attributes = TheElement.Attributes &#xA;						set Methods = TheElement.Methods&#xA;						&#xA;						dim numOfConnectors &#xA;						numOfConnectors = Connectors.Count &#xA;						&#xA;						dim numOfAttributes&#xA;						numOfAttributes = Attributes.Count &#xA;						&#xA;						dim numOfMethods &#xA;						numOfMethods = Methods.Count&#xA;						&#xA;						objOutFile.WriteLine &quot;&quot;&quot;connectors&quot;&quot; : [&quot;  &#xA;						&#xA;						for each aConnector in Connectors &#xA;							'Msgbox aConnector.ConnectorGUID&#xA;							countConnectors = countConnectors + 1&#xA;							&#xA;							objOutFile.WriteLine &quot;{&quot;&#xA;							objOutFile.WriteLine &quot;&quot;&quot;sourceId&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Repository.GetElementByID(aConnector.ClientID).ElementId &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;endId&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Repository.GetElementByID(aConnector.SupplierID).ElementId &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;sourceName&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.ClientID).Name) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;endName&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.SupplierID).Name) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;type&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.Type &amp; &quot;&quot;&quot;&quot; &amp; &quot;, &quot;&quot;stereotype&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.Stereotype &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;startMultiplicity&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.ClientEnd.Cardinality &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;endMultiplicity&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.SupplierEnd.Cardinality &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;connectorId&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.ConnectorID &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;connectorName&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(aConnector.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;targetRole&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.SupplierEnd.Role &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;sourceRole&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; aConnector.ClientEnd.Role &amp; &quot;&quot;&quot;&quot;&#xA;							&#xA;							if aConnector.Type = &quot;Aggregation&quot; then &#xA;							&#xA;								Dim xDoc1 &#xA;								Set xDoc1 = CreateObject( &quot;MSXML2.DOMDocument&quot; )   &#xA;								&#xA;								xDoc1.LoadXML(Repository.SQLQuery(&quot;SELECT t_connector.DestIsAggregate FROM t_connector WHERE t_connector.Connector_ID =&quot; &amp; aConnector.ConnectorID))  &#xA;								objOutFile.WriteLine &quot;, &quot;&quot;aggregationType&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; xDoc1.selectNodes(&quot;//Row&quot;)(0).Text &amp; &quot;&quot;&quot;&quot; &#xA;								&#xA;							elseif aConnector.Type = &quot;NoteLink&quot; and  aConnector.ClientId = TheElement.ElementID then  &#xA;								&#xA;								if Repository.GetElementByID(aConnector.SupplierID).Type = &quot;Note&quot; then&#xA;									objOutFile.WriteLine &quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.SupplierID).Notes) &amp; &quot;&quot;&quot;&quot;  &#xA;								else  &#xA;									&#xA;									objOutFile.WriteLine &quot;, &quot;&quot;constraint&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.SupplierID).Notes) &amp; &quot;&quot;&quot;&quot; &#xA;								end if&#xA;							&#xA;							elseif aConnector.Type = &quot;NoteLink&quot; then  &#xA;								&#xA;								if Repository.GetElementByID(aConnector.ClientID).Type = &quot;Note&quot; then &#xA;									objOutFile.WriteLine &quot;, &quot;&quot;note&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.ClientID).Notes) &amp; &quot;&quot;&quot;&quot; &#xA;								else  &#xA;									&#xA;									'Msgbox CStr(Repository.GetElementByID(aConnector.ClientID).Constraints)&#xA;									objOutFile.WriteLine &quot;, &quot;&quot;constraint&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Repository.GetElementByID(aConnector.ClientID).Notes) &amp; &quot;&quot;&quot;&quot;&#xA;								end if &#xA;							elseif aConnector.Type = &quot;Realisation&quot; then &#xA;								objOutFile.WriteLine &quot;, &quot;&quot;sourceType&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Repository.GetElementByID(aConnector.ClientID).Type &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;								&quot;, &quot;&quot;endType&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Repository.GetElementByID(aConnector.SupplierID).Type &amp; &quot;&quot;&quot;&quot;&#xA;								&#xA;							end if&#xA;							&#xA;							if  countConnectors &lt; numOfConnectors then&#xA;								objOutFile.WriteLine &quot;}, &quot; &#xA;							else &#xA;								objOutFile.WriteLine &quot;}&quot;&#xA;							end if &#xA;							&#xA;								&#xA;						next&#xA;						objOutFile.WriteLine &quot;], &quot; &#xA;						countConnectors = 0&#xA;					&#xA;						&#xA;						objOutFile.WriteLine &quot;&quot;&quot;attributes&quot;&quot; : [&quot;&#xA;						for each anAttribute in Attributes &#xA;							&#xA;							set Attribute = Repository.GetAttributeByID(anAttribute.AttributeID)  &#xA;							'Msgbox Len(CStr(Attribute.Default))&#xA;							countAttributes = countAttributes + 1&#xA;							objOutFile.WriteLine &quot;{&quot;&quot;name&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; format(Attribute.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;type&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Attribute.Type &amp; &quot;&quot;&quot;&quot;  &amp;_&#xA;							&quot;, &quot;&quot;initialValue&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; Attribute.Default &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;							&quot;, &quot;&quot;lowerBound&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; Attribute.LowerBound &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;							&quot;, &quot;&quot;upperBound&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp;Attribute.UpperBound &amp; &quot;&quot;&quot;&quot;&#xA;							if  countAttributes &lt; numOfAttributes then&#xA;								objOutFile.WriteLine &quot;}, &quot; &#xA;							else &#xA;								objOutFile.WriteLine &quot;}&quot;&#xA;							end if &#xA;							&#xA;						next &#xA;						objOutFile.WriteLine &quot;],&quot; &#xA;						countAttributes = 0 &#xA;						&#xA;						objOutFile.WriteLine &quot;&quot;&quot;methods&quot;&quot; : [&quot;&#xA;						for each anMethod in Methods &#xA;							  &#xA;							countMethods = countMethods + 1&#xA;							objOutFile.WriteLine &quot;{&quot;&quot;name&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; format(anMethod.Name) &amp; &quot;&quot;&quot;&quot;&#xA;							if  countMethods &lt; numOfMethods then&#xA;								objOutFile.WriteLine &quot;}, &quot; &#xA;							else &#xA;								objOutFile.WriteLine &quot;}&quot;&#xA;							end if	&#xA;						next &#xA;						objOutFile.WriteLine &quot;],&quot; &#xA;						countMethods = 0 &#xA;						objOutFile.WriteLine &quot;&quot;&quot;comments&quot;&quot; : []&quot;&#xA;						&#xA;					end if &#xA;				end if&#xA;				if  countElements &lt; numOfElements and addClosingBracket then &#xA;					objOutFile.WriteLine &quot;}, &quot; &#xA;				elseif countElements = numOfElements and addClosingBracket then&#xA;					objOutFile.WriteLine &quot;}&quot;&#xA;				end if &#xA;				&#xA;			next &#xA;			objOutFile.WriteLine &quot;],&quot; &#xA;			objOutFile.WriteLine &quot;&quot;&quot;smallestClassYCoord&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot; &amp; smallestClassYCoord &amp; &quot;&quot;&quot;&quot; &amp; &quot;,&quot;  &#xA;			dim GeneralisationSetString  &#xA;			GeneralisationSetString = &quot;&quot;&quot;generalizationSetsString&quot;&quot;: &quot; &amp; &quot;&quot;&quot;&quot;&#xA;			dim xmlResult&#xA;			xmlResult = Repository.SQLQuery(&quot;SELECT t_xref.Description, t_xref.Client FROM t_xref WHERE t_xref.Behavior ='generalizationSet'&quot;)  &#xA;			'objOutFile.WriteLine &quot;&quot;&quot;&quot; &amp; CStr(xmlResult) &amp; &quot;&quot;&quot;&quot; &#xA;			Dim xDoc &#xA;			Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )  &#xA;			If xDoc.LoadXML(xmlResult) Then &#xA;				Dim rowList&#xA;				Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;				Dim rowNode &#xA;				Dim fieldNode &#xA;				&#xA;				For Each rowNode In rowList&#xA;					&#xA;					If (rowNode.HasChildNodes) Then&#xA;				&#xA;						For Each fieldNode In rowNode.ChildNodes&#xA;							'write f &#xA;							if(fieldNode.nodeName = &quot;Description&quot;) then&#xA;								GeneralisationSetString = GeneralisationSetString &amp; CStr(fieldNode.Text)  &#xA;							elseif (fieldNode.nodeName = &quot;Client&quot;) then &#xA;								GeneralisationSetString = GeneralisationSetString &amp;_&#xA;								Repository.GetConnectorByGuid(fieldNode.Text).ConnectorID &amp; &quot;-&quot; &amp;_&#xA;								Repository.GetElementByID(Repository.GetConnectorByGuid(fieldNode.Text).ClientID).Name &amp; &quot;-&quot; &amp;_&#xA;								Repository.GetElementByID(Repository.GetConnectorByGuid(fieldNode.Text).SupplierID).Name  &#xA;								&#xA;							end if &#xA;						'GeneralisationSetString = GeneralisationSetString &amp; &quot;@&quot;&#xA;						next &#xA;&#xA;					end if	 &#xA;				GeneralisationSetString = GeneralisationSetString &amp; &quot;@&quot;&#xA;				Next &#xA;			end if &#xA;			GeneralisationSetString = GeneralisationSetString &amp; &quot;&quot;&quot;&quot; &#xA;			objOutFile.WriteLine GeneralisationSetString&#xA;			objOutFile.WriteLine &quot;}&quot; &#xA;	&#xA;end function  &#xA;&#xA;Function generateJsonFromAPackage(thePackage,objOutFile)  &#xA;	&#xA;	'Diagrams loop&#xA;	dim theDiagrams as EA.Collection &#xA;	set theDiagrams = thePackage.Diagrams &#xA;	dim theDiagram as EA.Diagram&#xA;	dim anDiagram as EA.Diagram  &#xA;	dim numOfDiagrams&#xA;	numOfDiagrams = theDiagrams.Count() &#xA;	Dim countDiagrams&#xA;	countDiagrams=0&#xA;	objOutFile.WriteLine &quot;{&quot;&quot;packageName&quot;&quot;:&quot; &amp; &quot;&quot;&quot;&quot; &amp; format(thePackage.Name) &amp; &quot;&quot;&quot;&quot; &amp;_ &#xA;	&quot;, &quot;&quot;diagrams&quot;&quot; : [&quot;&#xA;	for each anDiagram in theDiagrams  &#xA;		countDiagrams = countDiagrams + 1&#xA;		set TheDiagram = Repository.GetDiagramByID(anDiagram.DiagramID)&#xA;		call generateJsonFromADiagram(theDiagram, objOutFile)  &#xA;		if(countDiagrams &lt; numOfDiagrams) then&#xA;			objOutFile.WriteLine &quot;,&quot; &#xA;		end if&#xA;		&#xA;	next &#xA;	objOutFile.WriteLine &quot;]&quot;&#xA;	objOutFile.WriteLine &quot;}&quot;  &#xA;	objOutFile.WriteLine &quot;,&quot; &#xA;	dim anPackage as EA.Package &#xA;	dim thePackages as EA.Collection  &#xA;	set thePackages = thePackage.Packages&#xA;	for each anPackage in thePackages &#xA;		call generateJsonFromAPackage(anPackage, objOutFile)  		&#xA;	next &#xA;		&#xA;end function&#xA;&#xA;Function format(note) &#xA;	dim result&#xA;	if (Len(Repository.GetFormatFromField(&quot;TXT&quot;, note)) = 0) then&#xA;		 &#xA;	else &#xA;		result = Repository.GetFormatFromField(&quot;TXT&quot;, note)  &#xA;		result = Replace(result, Chr(34), &quot;&quot;)&#xA;	end if&#xA;	format = result&#xA;end function&#xA;&#xA;"/>
		</DataRow>
	</DataSet>
</RefData>
